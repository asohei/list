#this file is to be placed into /etc/init.d/ and symbolic link to /etc/rcX.d with following command
# chmod 755 /etc/init.d/list-staging				
# update-rc.d list-staging defaults

#remove above



#! /bin/sh
### BEGIN INIT INFO
# Provides:          list-staging
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start or stop list-staging
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: asohei @ github

# Do NOT "set -e"

PROJECT=/home/sohei/sites/list-staging.t23.jp/source
DESC="django list staging service"
NAME=list-staging
PATH=/bin:/usr/bin
PIDFILE=/var/run/$NAME.pid
LOGDIR=/var/log/gunicorn/
USER=sohei
group=sohei
WORKERS=5
LOGFILE="$LOGDIR$NAME.log"
PIDFILE="$PROJECT$NAME.pid"
CMD="../v-python3.4/bin/gunicorn  --user=$USER --bind unix:/tmp/list-staging.t23.jp.socket superlists.wsgi:application --pid=$PIDFILE --name=$NAME --log-file=LOGFILE --log-level=info --workers=$WORKERS"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
        # Return
        #   0 if daemon has been started
        #   1 if daemon was already running
        #   2 if daemon could not be started

		if [ -e $PIDFILE ]; then
			return 1
		fi
  
 cd $PROJECT
  
 	. ../v-python3.4/bin/activate
 
	$CMD &

	echo "sohei"

  if [ $? = 0 ]; then
	echo "sohei"
    return 0
  else
    return 2
  fi
}

#
# Function that stops the daemon/service
#
do_stop()
{
        # Return
        #   0 if daemon has been stopped
        #   1 if daemon was already stopped
        #   2 if daemon could not be stopped
        #   other if a failure occurred
	
	 if [ -f $PIDFILE ]; then
    		PID=`cat $PIDFILE`
    		rm $PIDFILE
    		kill -15 $PID
    		
		if [ $? = 0 ]; then
      			return 0
    		else
      			return 2
    		fi
  		else
    			return 1
  		fi

}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {

  if [ -f $PIDFILE ]; then
    PID=`cat $PIDFILE`
    kill -HUP $PID
    return $?
  fi
  return 2

}

case "$1" in
  start)
  [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
  do_start
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  stop)
  [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  restart)
  log_daemon_msg "Restarting $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1)
    do_start
    case "$?" in
      0) log_end_msg 0 ;;
      1) log_end_msg 1 ;; # Old process is still running
      *) log_end_msg 1 ;; # Failed to start
    esac
    ;;
    *)
      # Failed to stop
    log_end_msg 1
    ;;
  esac
  ;;
  reload)
  log_daemon_msg "Reloading $DESC" "$NAME"
  do_reload
  case "$?" in
    0) log_end_msg 0 ;;
    *) log_end_msg 1 ;;
  esac
  ;;
  *)
  echo "Usage: $SCRIPTNAME {start|stop|restart|reload}" >&2
  exit 3
  ;;
esac

:


